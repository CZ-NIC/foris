{% extends 'config/base.html.j2' %}

{% block config_base %}
{% if is_xhr is not defined %}
<div id="page-config" class="config-page">
{% endif %}
    <p>
    {%- trans %}
        On this tab you can set up Wi-Fi of other devices controlled by this device.
    {%- endtrans %}
    </p>
{% if is_xhr is not defined %}
    <h3>{% trans %}Device list{% endtrans %}</h3>
    <div id="subordinates-message"></div>
    <div id="subordinates-table">
    {% trans %}Loading manged devices...{% endtrans %}
    </div>
    <br />
    <div id="subordinates-edit">
    </div>
    <script>
        Foris.queryBackendWifi = async (controller_id) => {
            let run = async () => {
                try {
                    resp = await Foris.performBackendQuery(controller_id, "wifi", "get_settings");
                    $(`#sub-${controller_id}`).find(".wifi-count").text(resp.devices.length);
                    let channels = [];
                    for (let device of resp.devices) {
                        if (device.enabled) {
                            channels.push(device.channel == 0 ? "*": device.channel);
                        }
                    };
                    $(`#sub-${controller_id}`).find(".wifi-channels").text(channels.join(", "));
                } catch(err) {
                    $(`#sub-${controller_id}`).find(".wifi-count").text("?");
                    $(`#sub-${controller_id}`).find(".wifi-channels").text("?");
                }
            };
            run();  // call async don't wait for it
        };
        Foris.loadSubordinatesList = async () => {
            let resp = await $.get('{{ url("config_ajax", page_name="subordinates-wifi") }}', {action: "list"});
            $("#subordinates-table").replaceWith(resp);
            Foris.overrideSubordinatesButtons();
            Foris.setSubordinatesTimeouts();
        }
        Foris.setSubordinatesTimeouts = () => {
            for (timeout in Foris.subordinateKeepAliveTimeouts) {
                clearTimeout(Foris.subordinateKeepAliveTimeouts[timeout]);
            }
            Foris.subordinateKeepAliveTimeouts = {};
            $(".sub-connection").each((idx, val) => {
                let id = $(val).attr("id");
                if (id) {
                    Foris.subordinateSetKeepAliveTimeout(id.replace('sub-', ''));
                }
            });
        };
        Foris.overrideSubordinatesEditButton = async () => {
            $("#subordinates-edit form").submit(async (e) => {
                e.preventDefault();
                let form = $(e.currentTarget);
                resp = $.ajax({
                    type: "POST",
                    url: form.attr('action'),
                    data: form.serialize()
                });
                form.find("input, select, button").attr("disabled", "disabled");

                let new_form = await resp;
                $("#subordinates-edit").replaceWith(new_form);
                await Foris.suboridnatesOverrideEditClose();
                await Foris.overrideSubordinatesEditButton();
                await Foris.loadSubordinatesList();
                $(".subordinate-buttons button").hide();
            });
        };
        Foris.overrideSubordinatesButtons = async () => {
            $(".subordinate-buttons").submit(async (e) => {
                e.preventDefault();
                let form = $(e.currentTarget);
                let action = $(e.originalEvent.explicitOriginalTarget).val();
                let form_data = {};
                let serialized = form.serializeArray();
                for (record in serialized) {
                    form_data[serialized[record].name] = serialized[record].value;
                }
                let controller_id = form_data.controller_id;
                let renderResponse = (resp) => {
                    $("#subordinates-message").replaceWith(resp);
                };
                let resp = null;
                switch (action) {
                    case "edit":
                        Foris.subordinateInEditMode = true;
                        try {
                            resp = await $.ajax({
                                type: "POST",
                                url: '{{ url("config_ajax_form", page_name="subordinates-wifi", form_name="wifi-form") }}',
                                data: `&csrf_token=${form_data["csrf_token"]}&_controller_id=${form_data["controller_id"]}&_update=1`,
                            });
                        } catch(err) {
                            Foris.subordinateInEditMode = false;
                            return;
                        }
                        await $("#subordinates-edit").promise();
                        $("#subordinates-edit").replaceWith(resp);
                        $(".subordinate-buttons button").hide('slow');
                        await $(".subordinate-buttons button").promise();
                        $("#subordinates-edit").show('slow');
                        await $("#subordinates-edit").promise();
                        await Foris.suboridnatesOverrideEditClose();
                        Foris.overrideSubordinatesEditButton();
                        return;
                }
                $(".subordinate-buttons button").prop('disabled', true);
            });
        };
        Foris.suboridnatesOverrideEditClose = async () => {
            $("#subordinates-edit").find("a.button").click(async (e) => {
                Foris.subordinateInEditMode = false;
                e.preventDefault();
                $("#subordinates-edit").hide('slow');
                await $("#subordinates-edit").promise();
                $("#subordinates-edit").replaceWith("<div id='subordinates-edit'></div>");
                if (Foris.subordinatesGetView() == "subordinates") {
                    $(".subordinate-buttons button").show('slow');
                    await $(".subordinate-buttons button").promise();
                }
            });
        };
        Foris.subordinateInEditMode = false;
        Foris.subordinatesAlive = {};
        Foris.subordinateKeepAliveTimeouts = {};
        Foris.subordinateSetKeepAliveTimeout = (controller_id) => {
            let element = $(`#sub-${controller_id}`);
            let state_element = element.find(".state");
            Foris.subordinateKeepAliveTimeouts[controller_id] = setTimeout(() => {
                Foris.subordinatesAlive[controller_id] = false;
                state_element.removeClass();
                state_element.addClass("state fas fa-exclamation-circle");
                delete Foris.subordinateKeepAliveTimeouts[controller_id];
                $(`div[data-controller-id=${controller_id}]`).replaceWith(`<div id='subordinates-edit' class='message error' data-controller-id='${controller_id}'>${Foris.messages.subordinatesSubordinatesFailed(controller_id)}</div>`);
                Foris.subordinateInEditMode = false;
            }, 3000);
        };
        Foris.updateSubordinateState = async (data) => {
            let element = $(`#sub-${data.id}`);
            let state_element = element.find(".state");
            if (!document.hidden) {
                await state_element.animate({opacity: '0.2'}, 50);
            }
            state_element.removeClass();
            switch (data.state) {
                case 'started':
                    state_element.addClass("state fas fa-circle");
                    break;
                case 'running':
                    if (data.id in Foris.subordinateKeepAliveTimeouts) {
                        clearTimeout(Foris.subordinateKeepAliveTimeouts[data.id]);
                    }
                    state_element.addClass("state fas fa-check-circle");
                    Foris.subordinateSetKeepAliveTimeout(data.id);
                    if (!Foris.subordinatesAlive[data.id]) {  // query backend if needed
                        Foris.queryBackendWifi(data.id);
                    }
                    Foris.subordinatesAlive[data.id] = true;
                    if (!Foris.subordinateInEditMode) {
                        $(`#sub-${data.id}`).find("button[value=edit]").show("slow");
                        let message = $(`div[data-controller-id=${data.id}].message`);
                        message.hide("slow");
                        await message.promise();
                        message.replaceWith("<div id='subordinates-edit'></div>");
                    }
                    break;
                case 'exitted':
                    state_element.addClass("state fas fa-exclamation-circle");
                    break;
                default:
                    state_element.addClass("state fas fa-question-circle");
                    break;
            }
            if (!document.hidden) {
                await state_element.animate({opacity: '1.0'}, 50);
            }
        };
        Foris.addWsHanlder("subordinates", async (msg) => {
            switch(msg.action) {
              case "add_sub":
              case "add_subsub":
              case "del":
              case "set_enabled":
                await Foris.loadSubordinatesList();
                break;
            }
        });
        Foris.addWsHanlder("remote", async (msg) => {
            switch(msg.action) {
                case "advertize":
                    Foris.updateSubordinateState(msg.data);
                    break;
            };
        }, '+');
        $(document).ready(function() {
            Foris.loadSubordinatesList();
            Foris.afterAjaxUpdateFunctions.push(Foris.suboridnatesOverrideEditClose);
            Foris.afterAjaxUpdateFunctions.push(Foris.overrideSubordinatesEditButton);
        });
    </script>
    <style>
    #subordinates-table .sub-line .state {
        font-size: 1.5rem;
    };
    #subordinates-table td {
        vertical-align: top;
    };
    </style>
</div>
{% endif %}
{% endblock %}
